:root {
  --building-color1: #aa80ff;
  --building-color2: #66cc99;
  --building-color3: #cc6699;
  --building-color4: #538cc6;
  --window-color1: #bb99ff;
  --window-color2: #8cd9b3;
  --window-color3: #d98cb3;
  --window-color4: #8cb3d9;
}
/* you can target everything with an asterisk. Add a border to everything by using the * 
selector, and giving it a border of 1px solid black. This is a trick I like to use to help 
visualize where elements are and their size. You will remove this later. */
/* Also add a box-sizing of border-box to everything. This will make it so 
the border you added doesn't add any size to your elements.*/

* {
  /* after completing all your buildings remove the border */
  /* border: 1px solid black; */
  box-sizing: border-box;
}
/* You can see the body (it's the inner-most box on your page); the box around 
it is the html element. Make your body fill the whole viewport by giving it a height 
of 100vh. Remove the default margin from the body by setting the margin to 0. Finally, 
set the overflow property to hidden to hide any scroll bars that appear when something 
extends past the viewport. */
body {
  height: 100vh;
  margin: 0;
  overflow: hidden;
}
.background-buildings,
.foreground-buildings {
  width: 100%;
  height: 100%;
  /* The buildings are stacked on top of each other and running off the screen. 
  Let's fix that. Add the properties display: flex;, align-items: flex-end;, 
  and justify-content: space-evenly; to the background-buildings class. This will use 
  flexbox again to evenly space the buildings across the bottom of the element.*/
  display: flex;
  align-items: flex-end;
  justify-content: space-evenly;
  position: absolute;
  top: 0;
}
.building-wrap {
  /*You want .bb4 to share the properties of .bb1 that center the sections. Instead of duplicating that code, create a new class above the background building comment called building-wrap. Leave it empty for now; this class will be used in a few places to save you some coding. */
  display: flex;
  flex-direction: column;
  align-items: center;
}
.window-wrap {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}
.sky {
  /* This will add circular gradient to the background that will be your sun. */
  background: radial-gradient(
    circle closest-corner at 15% 15%,
    #ffcf33,
    #ffcf33 20%,
    #ffff66 21%,
    #bbeeff 100%
  );
}
.bb1 {
  /* Give your .bb1 element these style properties: display: flex;, flex-direction: column;, 
    and align-items: center;. This will center the parts of the building using "flex" or "flexbox". 
    You will learn about it in more detail on another project.*/
  width: 10%;
  height: 70%;
  display: flex;
  flex-direction: column;
  align-items: center;
  /* Now you have something that is starting to resemble a building. 
  Let's get into your first variable. Variable declarations begin with two dashes (-) 
  and are given a name and a value like this: --variable-name: value;. In the .bb1 class, 
  create a variable named --building-color1 and give it a value of #999. */
  /* --building-color1: #aa80ff;
  --building-color2: #66cc99;
  --building-color3: #cc6699; We created the root element where it can target the all declared variables
  so we can not use fall back property remove it now. */
}
.bb1a {
  /* To use a variable, put the variable name in parentheses with var in front of them 
    like this: var(--variable-name). Add your variable as the value of the background-color 
    property of the .bb1a class. Whatever value you gave the variable will be applied to whatever
     property you use it on. In this case, your variable has the value of #999. So #999 will be used as 
     the value for the background-color property. */
  width: 70%;
  /* height: 10%;
  background-color: var(--building-color1); */
  /* background: linear-gradient(
    var(--building-color1),
    var(--window-color1)
  ); its a gradient transition color1 and color 2 */
}
.bb1-window {
  /*created a new class selector called bb1-window, and move the height and background properties and values from .bb1a to the new class selector. */
  height: 10%;
  background: linear-gradient(var(--building-color1), var(--window-color1));
}
.bb1b {
  width: 80%;
  /* height: 10%;
  background-color: var(--building-color1); no need of it you already created in the new class bb1-window and added with bb1a,bb1b and bb1c */
}
.bb1c {
  width: 90%;
  /* height: 10%;
  background-color: var(--building-color1); */
}
.bb1d {
  width: 100%;
  height: 70%;
  background: linear-gradient(
    var(--building-color1) 50%,
    /* its a transition how much you want it you can define */
      var(--window-color1)
  );
}
.bb2 {
  width: 10%;
  height: 50%;

  /* that didn't work. You can add a fallback value 
  to a variable by putting it as the second value of where you use the variable like this: 
  var(--variable-name, fallback-value). The property will use the fallback value when there's a 
  problem with the variable */
}
.bb2a {
  /*margin: auto;
  width: 5vw;
  height: 5vw;
  border-top: 1vw solid #000;
  border-bottom: 1vw solid #000;
  border-left: 1vw solid #999;
  border-right: 1vw solid #999; */
  border-bottom: 5vh solid var(--building-color2);
  border-left: 5vw solid transparent;
  border-right: 5vw solid transparent;
}
.bb2b {
  width: 100%;
  height: 100%;
  background: repeating-linear-gradient(
    var(--building-color2) 0%,
    var(--building-color2) 6%,
    var(--window-color2) 6%,
    var(--window-color2) 9%
  );
}
.bb3 {
  width: 10%;
  height: 55%;
  /* background-color: var(--building-color3); Since we are using Gradient property */
  background: repeating-linear-gradient(
    90deg,
    var(--building-color3),
    var(--building-color3),
    var(--window-color3) 15%
  );
}
.bb4 {
  width: 11%;
  height: 58%;
  /*background-color: var(--building-color4); */
}
.bb4a {
  width: 3%;
  height: 10%;
  background-color: var(--building-color4);
}
.bb4b {
  width: 80%;
  height: 5%;
  background-color: var(--building-color4);
}
.bb4c {
  width: 100%;
  height: 85%;
  background-color: var(--building-color4);
}
.bb4-window {
  width: 18%;
  height: 90%;
  background-color: var(--window-color4);
}
/* the foreground buildings container to sit directly on top of the background buildings element. 
Give it a width and height of 100%, set the position to absolute, and the top to 0. This will make 
it the same size as the body and move the start of it to the top left corner. */

/*.foreground-buildings { We already defined in the background-buildings all the properties.
  width: 100%;
  height: 100%;
   position: absolute;
  top: 0; Optimizing the code by using same values and multiple selectors moving these two elements 
  to background-buildings
  display: flex;
  align-items: flex-end;
  justify-content: space-evenly;
}
*/
.fb1 {
  width: 10%;
  height: 60%;
  /*background-color: var(--building-color4); */
}
.fb1a {
  /*You're going to use some more border tricks for the top section. Add a border-bottom with a value of 7vh solid var(--building-color4) to .fb1a. This will put a 7vh height border on the bottom. But since the element has zero size, it only shows up as a 2px wide line from the 1px border that is on all the elements. */
  border-bottom: 7vh solid var(--building-color4);
  border-left: 2vw solid transparent;
  border-right: 2vw solid transparent;
}
.fb1b {
  width: 60%;
  height: 10%;
  background-color: var(--building-color4);
}
.fb1c {
  width: 100%;
  height: 80%;
  background: repeating-linear-gradient(
      90deg,
      var(--building-color4) 0%,
      var(--building-color4) 10%,
      transparent 10%,
      transparent 15%
    ),
    repeating-linear-gradient(
      var(--building-color4),
      var(--building-color4) 10%,
      var(--window-color4) 10%,
      var(--window-color4) 90%
    );
}
.fb2 {
  width: 10%;
  height: 40%;
  /*background-color: var(--building-color3); */
}
.fb2a {
  width: 100%;
  height: 75%;
  border-bottom: 10vh solid var(--building-color3);
  border-left: 1vw solid transparent;
  border-right: 1vw solid transparent;
}
.fb2b {
  width: 100%;
  height: 75%;
  background-color: var(--building-color3);
}
.fb2-window {
  width: 22%;
  height: 100%;
  background-color: var(--window-color3);
}
.fb3 {
  width: 10%;
  height: 35%;
  /* background-color: var(--building-color1); */
}
.fb3a {
  width: 80%;
  height: 15%;
  background-color: var(--building-color1);
}
.fb3b {
  width: 100%;
  height: 35%;
  background-color: var(--building-color1);
}
.fb3-window {
  width: 25%;
  height: 80%;
  background-color: var(--window-color1);
}
.fb4 {
  width: 8%;
  height: 45%;
  /*background-color: var(--building-color1); */
  position: relative;
  left: 10%;
}
.fb4b {
  width: 100%;
  height: 89%;
  background-color: var(--building-color1);
  display: flex;
  flex-wrap: wrap;
}
.fb4-window {
  width: 30%;
  height: 10%;
  border-radius: 50%;
  background-color: var(--window-color1);
  margin: 10%;
}
.fb4a {
  border-top: 5vh solid transparent;
  border-left: 8vw solid var(--building-color1);
}
.fb5 {
  width: 10%;
  height: 33%;
  /*background-color: var(--building-color2); */
  position: relative;
  right: 10%;
  background: repeating-linear-gradient(
      var(--building-color2),
      var(--building-color2) 5%,
      transparent 5%,
      transparent 10%
    ),
    repeating-linear-gradient(
      90deg,
      var(--building-color2),
      var(--building-color2) 12%,
      var(--window-color2) 12%,
      var(--window-color2) 44%
    );
}
.fb6 {
  width: 9%;
  height: 38%;
  /*background-color: var(--building-color3); */
  background: repeating-linear-gradient(
      90deg,
      var(--building-color3),
      var(--building-color3) 10%,
      transparent 10%,
      transparent 30%
    ),
    repeating-linear-gradient(
      var(--building-color3),
      var(--building-color3) 10%,
      var(--window-color3) 10%,
      var(--window-color3) 30%
    );
}
@media (max-width: 1000px) {
  :root {
    --building-color1: #000;
    --building-color2: #000;
    --building-color3: #000;
    --building-color4: #000;
    --window-color1: #777;
    --window-color2: #777;
    --window-color3: #777;
    --window-color4: #777;
  }
  .sky {
    /* This will add circular gradient to the background that will be your sun. */
    /* To see the night and day effect minimize the browser window it will become night */
    background: radial-gradient(
      closest-corner circle at 15% 15%,
      #ccc,
      #ccc 20%,
      #445 21%,
      #223 100%
    );
  }
}
/* Variables are primarily used with colors, and that's how you used them here. 
But they can be given any value and used on any property. */
